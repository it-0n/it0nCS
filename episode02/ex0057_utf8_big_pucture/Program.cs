using System;
using System.Text;

class Program
{
    static void Main()
    {
        // –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ UTF-8 –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
        byte[] utf8Bytes = "Hello, UTF-8!"u8.ToArray(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ReadOnlySpan<byte> –≤ byte[]
        WriteLine($"Length of UTF-8 array: {utf8Bytes.Length}");

        // –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å Unicode, —Ç–æ–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ byte[]
        byte[] emoji = "üòä"u8.ToArray();
        WriteLine($"Length of emoji in UTF-8: {emoji.Length}");

        // –ü—Ä–∏–º–µ—Ä 3: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API
        var utf8String = "Content-Type: application/json"u8;
        SendToApi(utf8String);

        // –ü—Ä–∏–º–µ—Ä 4: –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è UTF-8 —Å—Ç—Ä–æ–∫ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–≤–æ–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        var part1 = "Hello, "u8.ToArray();
        var part2 = "world!"u8.ToArray();
        var fullMessage = CombineByteArrays(part1, part2); // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π –º–µ—Ç–æ–¥
        WriteLine(Encoding.UTF8.GetString(fullMessage));

        // –ü—Ä–∏–º–µ—Ä 5: –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Å—Ç—Ä–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞ u8
        var name = "Alice";
        // var greeting = $"Hello, {name}!"u8; // —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
        // –ø—Ä–æ—ç—Ç–æ–º—É –ø–æ–ª—É—á–∞–µ–º –º–∞—Å–∏–∏–≤ –±–∞–π—Ç –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–±–æ–±–æ–º
        var greeting = Encoding.UTF8.GetBytes($"Hello, {name}!");
        WriteLine(Encoding.UTF8.GetString(greeting));

        // –ü—Ä–∏–º–µ—Ä 6: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª
        var json = """
        {
            "name": "Alice",
            "age": 30
        }
        """u8;
        WriteLine(Encoding.UTF8.GetString(json));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤ –±–∞–π—Ç–æ–≤
    static byte[] CombineByteArrays(byte[] first, byte[] second)
    {
        var combined = new byte[first.Length + second.Length];
        Buffer.BlockCopy(first, 0, combined, 0, first.Length);
        Buffer.BlockCopy(second, 0, combined, first.Length, second.Length);
        return combined;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–π—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ API
    static void SendToApi(ReadOnlySpan<byte> data)
    {
        WriteLine($"Sending to API: {Encoding.UTF8.GetString(data)}");
    }
}
